# Rules for modular, well-structured code in this workspace

## Language & Standards
- Use TypeScript everywhere. Avoid `any`; prefer precise types and generics.
- Follow existing ESLint/Prettier configs. Do not override without discussion.
- Small, single-responsibility files. Split files >300 lines or with multiple concerns.
- I am using Windows OS.

## Separation of Concerns
- Keep I/O (HTTP, DB, file system) out of pure logic modules.
- Avoid cross-layer imports (e.g., controllers importing models directly). Use services/repositories.

## Folder placement (Backend) — `Backend/src/`
- `controllers/`: Only parse/validate requests, call services, map to HTTP responses.
- `services/`: Business logic; orchestrate repositories and utils.
- `repositories/` or `models/`: Data access; no business logic.
- `routes/`: Route definitions only; map to controllers.
- `middlewares/`: Auth, validation, error handling, rate limiting, logging.
- `utils/`: Pure stateless helpers.
- `types/`: Shared interfaces, DTOs, request/response types.
- `configs/`: Config/env loading; no runtime side effects beyond config.
- Ensure lightweight payloads for mobile clients (pagination, compression).
- Add monitoring/observability (logging, metrics exporters).
- Place new backend files in the appropriate folder above. If a folder is missing, create it.

## Folder placement (Frontend/Mobile) — `Frontend/src/`
- `components/FeatureName/`: Reusable, presentational components (PascalCase filenames).
- `pages/FeatureName/`: Route-level components; compose components/hooks/services.
- `hooks/`: Reusable hooks `useX.ts`.
- `services/api/`: API clients and fetch logic; use a shared HTTP client.
- `context/`: React context providers.
- `types/`: Shared types/interfaces and API DTOs.
- `assets/`: Static assets (images, fonts, icons).
- `theme/`: Centralized design system (colors, spacing, typography, shadows, dark mode support).
- `navigation/`: App navigation setup (stack, tabs, drawer).
- `styles/`: Reusable style helpers; prefer CSS Modules (web) or StyleSheet.create (React Native).
- `i18n/`: Localization setup (strings, formats).
- Co-locate component-specific styles as CSS Modules or scoped styles. Avoid global CSS leakage.

## UI/UX Standards
- Build from a design system; enforce typography, spacing, and color scales.
- Test layouts on multiple screen sizes (responsive/adaptive).
- Use smooth animations, but keep them performant.
- Follow platform conventions (Material Design for Android, Human Interface Guidelines for iOS).
- Accessibility: add `accessibilityLabel`, `role`, `aria-*` props; support screen readers and high-contrast themes.

## HTTP Clients
- Use a shared HTTP client (with interceptors) rather than per-call `fetch`/`axios`.
- Centralize base URL, auth headers, retries, caching, and error normalization.
- Add offline-first support (queue/retry requests when back online).

## Validation & Errors
- Validate all external inputs (requests, env, API responses). Use schema validation where helpful.
- Backend: Throw typed errors; rely on centralized `errorHandler` middleware for responses.
- Frontend: Normalize API errors in services; components receive user-friendly messages.
- Mobile: Show consistent error dialogs/snackbars via a centralized handler.

## Testing
- Co-locate tests next to code as `*.test.ts`/`*.test.tsx` or in `__tests__/`.
- Unit-test services, hooks, and pure utils. Prefer integration tests for controllers/routes.
- Mobile: Add snapshot tests for components and E2E tests with Detox/Appium.

## State & Side Effects (Frontend/Mobile)
- Prefer local state; elevate to context only when shared across distant components.
- Use context or lightweight state libraries (Zustand/Recoil) for global app state (auth, theme, notifications).
- Keep effects minimal and idempotent; extract complex logic to hooks.
- Handle app lifecycle events (foreground/background) with hooks.

## Naming & Conventions
- Files: `kebab-case` for non-components; `PascalCase.tsx` for React components.
- Exports: Prefer named exports; use `index.ts` only as thin barrels when helpful.
- Functions/components should do one thing; avoid "god" modules.

## Dependencies & Imports
- Do not introduce new libraries if standard libs/utilities suffice.
- Minimize third-party libraries to keep mobile bundle size small.
- Prefer relative imports within a feature; use root/alias imports only if configured.

## Security & Config
- Never hardcode secrets. Use `.env` + typed config loader in `configs/`.
- Sanitize/escape output where relevant; validate and authorize on every endpoint.
- Mobile: store tokens securely (SecureStore/Keychain/Keystore).

## Performance
- Backend: Avoid N+1 data access; batch where possible; add caching.
- Frontend/Mobile:
  - Memoize expensive computations.
  - Use `React.memo`, `useCallback`, and `useMemo` where appropriate.
  - Lazy-load pages/screens.
  - Avoid unnecessary re-renders (stable props/keys).
  - Optimize assets (compress, prefetch).
  - Monitor bundle size (Metro/Webpack reports).

## Deployment & Delivery
- Mobile CI/CD:
  - Automated builds via EAS (Expo) or Fastlane.
  - Automated tests before release.
  - Staging + production build configs.
- Backend CI/CD:
  - Automated lint, test, build, and deploy pipelines.
- Versioning:
  - Follow semantic versioning.
  - Increment app versions for Play Store/App Store submissions.

## When generating code, ALWAYS
- State the exact target path(s) and create missing folders.
- Place files in the correct folder per rules above.
- Add minimal docs/JSDoc for exported functions, types, and components.
- Add/extend tests when adding non-trivial logic.
